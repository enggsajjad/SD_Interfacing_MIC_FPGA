C51 COMPILER V6.11.4C,  MAIN                      12/30/108  12:00:00  PAGE  1

QCW(0x00002D1A)

WIN32 C51 COMPILER V6.11.4C, COMPILATION OF MODULE MAIN      
OBJECT MODULE PLACED IN e:\microcontrollers\at89c51rc2\spi\spi_string_transfer_s
            -lave_master\spi_slave_4bitlcd\main.obj
COMPILER INVOKED BY: C51.EXE E:\MICROCONTROLLERS\AT89C51RC2\SPI\SPI_STRING_TRANS
            -FER_SLAVE_MASTER\SPI_SLAVE_4BITLCD\MAIN.C OBJECT(E:\MICROCONTROLLER
            -S\AT89C51RC2\SPI\SPI_STRING_TRANSFER_SLAVE_MASTER\SPI_SLAVE_4BITLCD
            -\MAIN.OBJ) PIN(C:\FSI\INC) NOAM PR(E:\MICROCONTROLLERS\AT89C51RC2\S
            -PI\SPI_STRING_TRANSFER_SLAVE_MASTER\SPI_SLAVE_4BITLCD\MAIN.LST) CD 
            -SB OE(1) SM FP(NOFLOAT) PW(80) 

stmt level    source
   1          //LCD Interface 8 bit; using Busy Flag Technique
   2          //Programmer:	Sajjad Hussain, JE.
   3          #include "at89c51rc2.h"
   4          sbit BKLT = P2^3; 
   5          sbit RS  = P2^4; 
   6          sbit RW  = P2^5;
   7          sbit EN  = P2^6;
   8          sbit LED = P2^7;
   9          
  10          sbit BS  = P0^7;
  11          
  12          #define Putc LcdWriteChar
  13          
  14          bit isInit=0;
  15          unsigned char RecChar,g,status,spi_rx_bytes=0;
  16          bit spi_intr=0,spi_rx_done=0;
  17          char serial_data;
  18          
  19          //Function Prototypes
  20          void LcdInit();
  21          //void LcdBusy(void);
  22          void LcdReset();
  23          void DelayUs(void);
  24          void LcdDelayMS(void);
  25          void LcdClear(void);
  26          void LcdWriteCmd(unsigned char c);
  27          void LcdWriteChar(unsigned char var);
  28          void LcdWriteStr(char *var);
  29          void LcdGotoXY(unsigned char r,unsigned char c);
  30          void SendChar(unsigned char c);
  31          void SendStr(char *s);
  32          
  33          
  34          void main()
  35          {
  36   1      	
  37   1      	LcdInit();
  38   1      	LcdClear();
  39   1      	LcdGotoXY(1,4);
  40   1      	LcdWriteStr("SPI Slave");
  41   1      	LcdGotoXY(2,2);
  42   1      	LcdWriteStr("Multi Byte Test");
  43   1      	
  44   1      	EX0 = 1;
  45   1      	IT0=1; 
  46   1         SPDAT = '3';
  47   1         SPCON = 0x20;                /* P1.1 is available as standard I
            -/O pin */
  48   1      	SPCON &= ~0x10;               /* slave mode */
  49   1      	SPCON &= ~0x08;               /* CPOL=0; transmit mode example*/

            -  50   1      	SPCON |= 0x04;                /* CPHA=1; transmit mo
            -de example*/
  51   1      	//IEN1 |= 0x04;                 /* enable spi interrupt */
  52   1      	//SPCON |= 0x40;                /* spi run */
  53   1      	EA=1;                         /* enable interrupts */
  54   1      
  55   1      	isInit = 1;
  56   1      	while(1)
  57   1      	{
  58   2      		if(spi_intr)
  59   2      		{
  60   3      			spi_intr = 0;
  61   3      			//LcdClear();
  62   3      			//LcdGotoXY(1,1);
  63   3      			
  64   3      			switch(status)
  65   3      			{
  66   4      				case 0x80:
  67   4            	   serial_data=SPDAT;
  68   4            	   LcdGotoXY(1,spi_rx_bytes+1);
  69   4         	      Putc(serial_data);
  70   4         	      LcdGotoXY(2,spi_rx_bytes+1);
  71   4         	      Putc(spi_rx_bytes+48);
  72   4         	      spi_rx_bytes++;
  73   4       				break;
  74   4      			case 0x10:
  75   4      				Putc('F');
  76   4      				break;
  77   4      			case 0x40:
  78   4            	   Putc('O');
  79   4      				break;
  80   4      			}
  81   3      		//SPDAT = serial_data+32;
  82   3      		}//spi_intr
  83   2      	}//while
  84   1      }//main
  85          
  86          void it_SPI(void) interrupt 9 /* interrupt address is 0x004B */
  87          {
  88   1      	
  89   1      	status = SPSTA;
  90   1      	spi_intr = 1;
  91   1      }
  92          void KeyInt() interrupt 0 
  93          {  
  94   1      	if(isInit)
  95   1      	{
  96   2      	LcdClear();
  97   2      	LcdGotoXY(2,8);
  98   2      	spi_rx_bytes = 0;
  99   2      	LcdWriteStr("Ready");
 100   2      	IEN1 |= 0x04;                 /* enable spi interrupt */
 101   2      	SPCON |= 0x40;                /* spi run */
 102   2      	}//if Init
 103   1      }
 104          
 105          void Serial() interrupt 4
 106          {
 107   1      	if (RI)
 108   1      	{
 109   2      		RI = 0;
 110   2          	RecChar = SBUF;
 111   2      	}
 112   1      }
 113          void LcdClear()
 114          {
 115   1       LcdWriteCmd(0x01);
 116   1      }
 117          //Function Definitions
 118          void DelayUs(void)
 119          {
 120   1      	TL1 = 0x90;TH1 = 0xFE;//200 usec at 22.1184MHz
 121   1      	//TL1 = 0x48;TH1 = 0xFF;//100 usec at 22.1184MHz
 122   1      	//TL1 = 0xA4;TH1 = 0xFF;//50 usec at 22.1184MHz
 123   1      	//TL1 = 0xD2;TH1 = 0xFF;//25 usec at 22.1184MHz
 124   1      	//TL1 = 0xF7;TH1 = 0xFF;//5 usec at 22.1184MHz
 125   1      	//TL1 = 0xEE;TH1 = 0xFF;//10 usec at 22.1184MHz
 126   1      	TR1  = 1;
 127   1      	while(!TF1);
 128   1      	TR1  = 0;
 129   1      	TF1  = 0;
 130   1      }
 131          //8bit Interface
 132          void LcdInit()
 133          {
 134   1         LcdWriteCmd(0x38);	//Function Set 0x38
 135   1         LcdWriteCmd(0x38);	//Function Set
 136   1         LcdWriteCmd(0x38);	//Function Set
 137   1      	LcdWriteCmd(0x06);	//Entry Mode Set 0x06
 138   1         LcdWriteCmd(0x0C);	//Display On  Off Control 0x0C
 139   1      }
 140          
 141          void LcdBusy()
 142          {
 143   1      	BS   = 1;			//Make D7th bit of LCD as i/p
 144   1         EN   = 1;         //Make port pin as o/p
 145   1         RS   = 0;         //Selected command register
 146   1         RW   = 1;         //We are reading
 147   1         while(BS)
 148   1         {   					//read busy flag again and again till it becomes 0 Ena
            -ble H->L
 149   2         	EN   = 0;
 150   2            EN   = 1;
 151   2         }
 152   1      }
 153          void LcdWriteCmd(unsigned char var)
 154          {
 155   1      	P0 = var;      	//Commands to be Written
 156   1         RS   = 0;        	//Selected command register
 157   1         RW   = 0;        	//We are writing in instruction register
 158   1         EN   = 1;        	//Enable H->L
 159   1         EN   = 0;
 160   1         LcdBusy();      //Wait for LCD to process the command
 161   1      }
 162          void LcdWriteChar(unsigned char var)
 163          {
 164   1      	P0 = var;      	//Data/Character to be Written
 165   1         RS   = 1;         //Selected data register
 166   1         RW   = 0;         //We are writing
 167   1         EN   = 1;         //Enable H->L
 168   1         EN   = 0;
 169   1         LcdBusy();      //Wait for LCD to process the command
 170   1      }
 171          void LcdWriteStr(char *var)
 172          {
 173   1      	while(*var)       //till string ends send characters one by one
 174   1         	LcdWriteChar(*var++);
 175   1      }
 176          
 177          void LcdGotoXY(unsigned char row, unsigned char col)
 178          {
 179   1      	//LcdWriteCmd(0x80 | (row << 6) | col);
 180   1      	switch (row)
 181   1      	{
 182   2      		case 1: LcdWriteCmd(0x80 + col - 1); break;
 183   2      		case 2: LcdWriteCmd(0xc0 + col - 1); break;
 184   2      		case 3: LcdWriteCmd(0x94 + col - 1); break;
 185   2      		case 4: LcdWriteCmd(0xd4 + col - 1); break;
 186   2      		default: break;
 187   2      	}
 188   1      }
 189          
 190          void SendChar(unsigned char c)
 191          {
 192   1      
 193   1      	TI=1;
 194   1      	while (!TI);	TI=0;	SBUF = c;
 195   1      	while (!TI);	TI=0;
 196   1      }
 197          void SendStr(char *s)
 198          {
 199   1      	while (*s)
 200   1      	{
 201   2      		SendChar(*s);
 202   2      		s++;
 203   2      	}
 204   1      }
 205          
 206          
 207          
 208          
 209          
 210          
 211          
 212          
 213          
 214          
 215          
 216          
 217          
 218          
 219          
 220          
 221          
 222          
 223          
 224          
 225          
 226          
 227          
 228          
 229          
 230          
 231          
 232          
 233          
 234          
 235          
 236          
 237          
 238          
 239          
 240          
 241          
 242          
 243          
 244          
 245          
 246          
 247          
 248          
 249          
 250          
 251          
 252          
 253          
 254          
 255          
 256          
 257          
 258          
 259          
 260          
 261          
 262          
 263          
 264          
 265          
 266          
 267          
 268          
 269          
 270          
 271          
 272          
 273          
 274          
 275          
 276          
 277          
 278          
 279          
 280          
 281          
 282          
 283          
 284          
 285          
 286          
 287          
 288          
 289          
 290          
 291          
 292          
 293          
 294          
 295          
 296          
 297          
 298          
 299          
 300          
 301          
 302          
 303          
 304          
 305          
 306          
 307          
 308          
 309          
 310          
 311          
 312          
 313          
 314          
 315          
 316          
 317          
 318          
 319          
 320          
 321          
 322          
 323          
 324          
 325          
 326          
 327          
 328          
 329          
 330          
 331          
 332          
 333          
 334          
 335          
 336          
 337          
 338          
 339          
 340          
 341          
 342          
 343          
 344          
 345          
 346          
 347          
 348          
 349          
 350          
 351          
 352          
 353          
 354          
 355          
 356          
 357          
 358          
 359          
 360          
 361          
 362          
 363          
 364          
 365          
 366          
 367          
 368          
 369          
 370          
 371          
 372          
 373          
 374          
 375          
 376          
 377          
 378          
 379          
 380          
 381          
 382          
 383          
 384          
 385          
 386          
 387          
 388          
 389          
 390          
 391          
 392          
 393          
 394          
 395          
 396          
 397          
 398          
 399          
 400          
 401          
 402          
 403          
 404          
 405          
 406          
 407          
 408          
 409          
 410          
 411          
 412          
 413          
 414          
 415          
 416          
 417          
 418          
 419          
 420          
 421          
 422          
 423          
 424          
 425          
 426          
 427          
 428          
 429          
 430          
 431          
 432          
 433          
 434          
 435          
C51 COMPILER V6.11.4C,  MAIN                      12/30/108  12:00:00  PAGE  2

ASSEMBLY LISTING OF GENERATED OBJECT CODE

            ; FUNCTION main (BEGIN)
                                           ; SOURCE LINE # 37 
0000 120000  R      LCALL  LcdInit
                                           ; SOURCE LINE # 38 
0003 120000  R      LCALL  LcdClear
                                           ; SOURCE LINE # 39 
0006 7F01           MOV    R7,#001H
0008 7D04           MOV    R5,#004H
000A 120000  R      LCALL  _LcdGotoXY
                                           ; SOURCE LINE # 40 
000D 7B05           MOV    R3,#005H
000F 7A00    R      MOV    R2,#000H
0011 7900    R      MOV    R1,#000H
0013 120000  R      LCALL  _LcdWriteStr
                                           ; SOURCE LINE # 41 
0016 7F02           MOV    R7,#002H
0018 7D02           MOV    R5,#002H
001A 120000  R      LCALL  _LcdGotoXY
                                           ; SOURCE LINE # 42 
001D 7B05           MOV    R3,#005H
001F 7A00    R      MOV    R2,#000H
0021 7900    R      MOV    R1,#000H
0023 120000  R      LCALL  _LcdWriteStr
                                           ; SOURCE LINE # 44 
0026 D2A8           SETB   EX0
                                           ; SOURCE LINE # 45 
0028 D288           SETB   IT0
                                           ; SOURCE LINE # 46 
002A 75C533         MOV    SPDAT,#033H
                                           ; SOURCE LINE # 47 
002D 75C320         MOV    SPCON,#020H
                                           ; SOURCE LINE # 48 
0030 53C3EF         ANL    SPCON,#0EFH
0033 85C3C3         MOV    SPCON,SPCON
                                           ; SOURCE LINE # 49 
0036 53C3F7         ANL    SPCON,#0F7H
0039 85C3C3         MOV    SPCON,SPCON
                                           ; SOURCE LINE # 50 
003C 43C304         ORL    SPCON,#004H
003F 85C3C3         MOV    SPCON,SPCON
                                           ; SOURCE LINE # 53 
0042 D2AF           SETB   EA
                                           ; SOURCE LINE # 55 
0044 D200    R      SETB   isInit
0046         ?WHILE1:
                                           ; SOURCE LINE # 58 
0046 3000FD  R      JNB    spi_intr,?WHILE1
                                           ; SOURCE LINE # 60 
0049 C200    R      CLR    spi_intr
                                           ; SOURCE LINE # 64 
004B E500    R      MOV    A,status
004D 24F0           ADD    A,#0F0H
004F 6030           JZ     ?CASE3
0051 24D0           ADD    A,#0D0H
0053 6033           JZ     ?CASE4
0055 24C0           ADD    A,#0C0H
0057 6002           JZ     ?CASE5
0059 80EB           SJMP   ?WHILE1
005B         ?CASE5:
                                           ; SOURCE LINE # 67 
005B 85C500  R      MOV    serial_data,SPDAT
                                           ; SOURCE LINE # 68 
005E 7F01           MOV    R7,#001H
0060 E500    R      MOV    A,spi_rx_bytes
0062 04             INC    A
0063 FD             MOV    R5,A
0064 120000  R      LCALL  _LcdGotoXY
                                           ; SOURCE LINE # 69 
0067 AF00    R      MOV    R7,serial_data
0069 120000  R      LCALL  _LcdWriteChar
                                           ; SOURCE LINE # 70 
006C 7F02           MOV    R7,#002H
006E E500    R      MOV    A,spi_rx_bytes
0070 04             INC    A
0071 FD             MOV    R5,A
0072 120000  R      LCALL  _LcdGotoXY
                                           ; SOURCE LINE # 71 
0075 E500    R      MOV    A,spi_rx_bytes
0077 2430           ADD    A,#030H
0079 FF             MOV    R7,A
007A 120000  R      LCALL  _LcdWriteChar
                                           ; SOURCE LINE # 72 
007D 0500    R      INC    spi_rx_bytes
                                           ; SOURCE LINE # 73 
007F 80C5           SJMP   ?WHILE1
0081         ?CASE3:
                                           ; SOURCE LINE # 75 
0081 7F46           MOV    R7,#046H
0083 120000  R      LCALL  _LcdWriteChar
                                           ; SOURCE LINE # 76 
0086 80BE           SJMP   ?WHILE1
0088         ?CASE4:
                                           ; SOURCE LINE # 78 
0088 7F4F           MOV    R7,#04FH
008A 120000  R      LCALL  _LcdWriteChar
                                           ; SOURCE LINE # 79 
008D 80B7           SJMP   ?WHILE1

            ; FUNCTION main (END)

            ; FUNCTION it_SPI (BEGIN)
                                           ; SOURCE LINE # 90 
0000 C0D0           PUSH   PSW
                                           ; SOURCE LINE # 89 
0002 85C400  R      MOV    status,SPSTA
                                           ; SOURCE LINE # 90 
0005 D200    R      SETB   spi_intr
0007 D0D0           POP    PSW
0009 32             RETI   

            ; FUNCTION it_SPI (END)

            ; FUNCTION KeyInt (BEGIN)
                                           ; SOURCE LINE # 101 
0000 C0E0           PUSH   ACC
0002 C0F0           PUSH   B
0004 C083           PUSH   DPH
0006 C082           PUSH   DPL
0008 C0D0           PUSH   PSW
000A C000           PUSH   AR0
000C C001           PUSH   AR1
000E C002           PUSH   AR2
0010 C003           PUSH   AR3
0012 C004           PUSH   AR4
0014 C005           PUSH   AR5
0016 C006           PUSH   AR6
0018 EF             MOV    A,R7
0019 C007           PUSH   AR7
                                           ; SOURCE LINE # 94 
001B 300022  R      JNB    isInit,?NXT11
                                           ; SOURCE LINE # 96 
001E 120000  R      LCALL  LcdClear
                                           ; SOURCE LINE # 97 
0021 7F02           MOV    R7,#002H
0023 7D08           MOV    R5,#008H
0025 120000  R      LCALL  _LcdGotoXY
                                           ; SOURCE LINE # 98 
0028 E4             CLR    A
0029 F500    R      MOV    spi_rx_bytes,A
                                           ; SOURCE LINE # 99 
002B 7B05           MOV    R3,#005H
002D 7A00    R      MOV    R2,#000H
002F 7900    R      MOV    R1,#000H
0031 120000  R      LCALL  _LcdWriteStr
                                           ; SOURCE LINE # 100 
0034 43B104         ORL    IEN1,#004H
0037 85B1B1         MOV    IEN1,IEN1
                                           ; SOURCE LINE # 101 
003A 43C340         ORL    SPCON,#040H
003D 85C3C3         MOV    SPCON,SPCON
0040         ?NXT11:
0040 D007           POP    AR7
0042 D006           POP    AR6
0044 D005           POP    AR5
0046 D004           POP    AR4
0048 D003           POP    AR3
004A D002           POP    AR2
004C D001           POP    AR1
004E D000           POP    AR0
0050 D0D0           POP    PSW
0052 D082           POP    DPL
0054 D083           POP    DPH
0056 D0F0           POP    B
0058 D0E0           POP    ACC
005A 32             RETI   

            ; FUNCTION KeyInt (END)

            ; FUNCTION Serial (BEGIN)
                                           ; SOURCE LINE # 110 
0000 C0D0           PUSH   PSW
                                           ; SOURCE LINE # 107 
0002 309805         JNB    RI,?NXT15
                                           ; SOURCE LINE # 109 
0005 C298           CLR    RI
                                           ; SOURCE LINE # 110 
0007 859900  R      MOV    RecChar,SBUF
000A         ?NXT15:
000A D0D0           POP    PSW
000C 32             RETI   

            ; FUNCTION Serial (END)

            ; FUNCTION LcdClear (BEGIN)
                                           ; SOURCE LINE # 115 
0000 7F01           MOV    R7,#001H
0002 120000  R      LCALL  _LcdWriteCmd
0005 22             RET    

            ; FUNCTION LcdClear (END)

            ; FUNCTION DelayUs (BEGIN)
                                           ; SOURCE LINE # 120 
0000 758B90         MOV    TL1,#090H
0003 758DFE         MOV    TH1,#0FEH
                                           ; SOURCE LINE # 126 
0006 D28E           SETB   TR1
0008         ?WHILE3:
                                           ; SOURCE LINE # 127 
0008 308FFD         JNB    TF1,?WHILE3
                                           ; SOURCE LINE # 128 
000B C28E           CLR    TR1
                                           ; SOURCE LINE # 129 
000D C28F           CLR    TF1
000F 22             RET    

            ; FUNCTION DelayUs (END)

            ; FUNCTION LcdInit (BEGIN)
                                           ; SOURCE LINE # 134 
0000 7F38           MOV    R7,#038H
0002 120000  R      LCALL  _LcdWriteCmd
                                           ; SOURCE LINE # 135 
0005 7F38           MOV    R7,#038H
0007 120000  R      LCALL  _LcdWriteCmd
                                           ; SOURCE LINE # 136 
000A 7F38           MOV    R7,#038H
000C 120000  R      LCALL  _LcdWriteCmd
                                           ; SOURCE LINE # 137 
000F 7F06           MOV    R7,#006H
0011 120000  R      LCALL  _LcdWriteCmd
                                           ; SOURCE LINE # 138 
0014 7F0C           MOV    R7,#00CH
0016 120000  R      LCALL  _LcdWriteCmd
0019 22             RET    

            ; FUNCTION LcdInit (END)

            ; FUNCTION LcdBusy (BEGIN)
                                           ; SOURCE LINE # 143 
0000 D287           SETB   BS
                                           ; SOURCE LINE # 144 
0002 D2A6           SETB   EN
                                           ; SOURCE LINE # 145 
0004 C2A4           CLR    RS
                                           ; SOURCE LINE # 146 
0006 D2A5           SETB   RW
0008         ?WHILE5:
                                           ; SOURCE LINE # 147 
0008 308706         JNB    BS,?NXT19
                                           ; SOURCE LINE # 149 
000B C2A6           CLR    EN
                                           ; SOURCE LINE # 150 
000D D2A6           SETB   EN
000F 80F7           SJMP   ?WHILE5
0011         ?NXT19:
0011 22             RET    

            ; FUNCTION LcdBusy (END)

            ; FUNCTION _LcdWriteCmd (BEGIN)
              ; Register R7 is assigned to parameter var
                                           ; SOURCE LINE # 155 
0000 8F80           MOV    P0,R7
                                           ; SOURCE LINE # 156 
0002 C2A4           CLR    RS
                                           ; SOURCE LINE # 157 
0004 C2A5           CLR    RW
                                           ; SOURCE LINE # 158 
0006 D2A6           SETB   EN
                                           ; SOURCE LINE # 159 
0008 C2A6           CLR    EN
                                           ; SOURCE LINE # 160 
000A 120000  R      LCALL  LcdBusy
000D 22             RET    

            ; FUNCTION _LcdWriteCmd (END)

            ; FUNCTION _LcdWriteChar (BEGIN)
              ; Register R7 is assigned to parameter var
                                           ; SOURCE LINE # 164 
0000 8F80           MOV    P0,R7
                                           ; SOURCE LINE # 165 
0002 D2A4           SETB   RS
                                           ; SOURCE LINE # 166 
0004 C2A5           CLR    RW
                                           ; SOURCE LINE # 167 
0006 D2A6           SETB   EN
                                           ; SOURCE LINE # 168 
0008 C2A6           CLR    EN
                                           ; SOURCE LINE # 169 
000A 120000  R      LCALL  LcdBusy
000D 22             RET    

            ; FUNCTION _LcdWriteChar (END)

            ; FUNCTION _LcdWriteStr (BEGIN)
              ; Register R0R4R5 is assigned to parameter var
                                           ; SOURCE LINE # 174 
0000 EB             MOV    A,R3
0001 FD             MOV    R5,A
0002 EA             MOV    A,R2
0003 FC             MOV    R4,A
0004 E9             MOV    A,R1
0005 F8             MOV    R0,A
0006         ?WHILE7:
                                           ; SOURCE LINE # 173 
0006 ED             MOV    A,R5
0007 FB             MOV    R3,A
0008 EC             MOV    A,R4
0009 FA             MOV    R2,A
000A E8             MOV    A,R0
000B F9             MOV    R1,A
000C 120000  R      LCALL  IPGN1?C
000F 6015           JZ     ?NXT21
                                           ; SOURCE LINE # 174 
0011 ED             MOV    A,R5
0012 FB             MOV    R3,A
0013 EC             MOV    A,R4
0014 FA             MOV    R2,A
0015 E8             MOV    A,R0
0016 F9             MOV    R1,A
0017 08             INC    R0
0018 E8             MOV    A,R0
0019 7002           JNZ    ?LAB24
001B 0C             INC    R4
001C EC             MOV    A,R4
001D         ?LAB24:
001D 120000  R      LCALL  IPGN1?C
0020 FF             MOV    R7,A
0021 120000  R      LCALL  _LcdWriteChar
0024 80E0           SJMP   ?WHILE7
0026         ?NXT21:
0026 22             RET    

            ; FUNCTION _LcdWriteStr (END)

            ; FUNCTION _LcdGotoXY (BEGIN)
              ; Register R7 is assigned to parameter row
              ; Register R5 is assigned to parameter col
                                           ; SOURCE LINE # 180 
0000 EF             MOV    A,R7
0001 14             DEC    A
0002 600A           JZ     ?CASE10
0004 14             DEC    A
0005 600F           JZ     ?CASE11
0007 14             DEC    A
0008 6014           JZ     ?CASE12
000A 14             DEC    A
000B 6019           JZ     ?CASE13
000D 22             RET    
000E         ?CASE10:
                                           ; SOURCE LINE # 182 
000E ED             MOV    A,R5
000F 247F           ADD    A,#07FH
0011 FF             MOV    R7,A
0012 120000  R      LCALL  _LcdWriteCmd
0015 22             RET    
0016         ?CASE11:
                                           ; SOURCE LINE # 183 
0016 ED             MOV    A,R5
0017 24BF           ADD    A,#0BFH
0019 FF             MOV    R7,A
001A 120000  R      LCALL  _LcdWriteCmd
001D 22             RET    
001E         ?CASE12:
                                           ; SOURCE LINE # 184 
001E ED             MOV    A,R5
001F 2493           ADD    A,#093H
0021 FF             MOV    R7,A
0022 120000  R      LCALL  _LcdWriteCmd
0025 22             RET    
0026         ?CASE13:
                                           ; SOURCE LINE # 185 
0026 ED             MOV    A,R5
0027 24D3           ADD    A,#0D3H
0029 FF             MOV    R7,A
002A 120000  R      LCALL  _LcdWriteCmd
                                           ; SOURCE LINE # 186 
002D 22             RET    

            ; FUNCTION _LcdGotoXY (END)

            ; FUNCTION _SendChar (BEGIN)
              ; Register R7 is assigned to parameter c
                                           ; SOURCE LINE # 193 
0000 D299           SETB   TI
0002         ?WHILE10:
                                           ; SOURCE LINE # 194 
0002 3099FD         JNB    TI,?WHILE10
0005 C299           CLR    TI
0007 8F99           MOV    SBUF,R7
0009         ?WHILE11:
                                           ; SOURCE LINE # 195 
0009 3099FD         JNB    TI,?WHILE11
000C C299           CLR    TI
000E 22             RET    

            ; FUNCTION _SendChar (END)

            ; FUNCTION _SendStr (BEGIN)
              ; Register R0R4R5 is assigned to parameter s
                                           ; SOURCE LINE # 202 
0000 EB             MOV    A,R3
0001 FD             MOV    R5,A
0002 EA             MOV    A,R2
0003 FC             MOV    R4,A
0004 E9             MOV    A,R1
0005 F8             MOV    R0,A
0006         ?WHILE13:
                                           ; SOURCE LINE # 199 
0006 ED             MOV    A,R5
0007 FB             MOV    R3,A
0008 EC             MOV    A,R4
0009 FA             MOV    R2,A
000A E8             MOV    A,R0
000B F9             MOV    R1,A
000C 120000  R      LCALL  IPGN1?C
000F 6014           JZ     ?NXT29
                                           ; SOURCE LINE # 201 
0011 ED             MOV    A,R5
0012 FB             MOV    R3,A
0013 EC             MOV    A,R4
0014 FA             MOV    R2,A
0015 E8             MOV    A,R0
0016 F9             MOV    R1,A
0017 120000  R      LCALL  IPGN1?C
001A FF             MOV    R7,A
001B 120000  R      LCALL  _SendChar
                                           ; SOURCE LINE # 202 
001E 08             INC    R0
001F E8             MOV    A,R0
0020 70E4           JNZ    ?WHILE13
0022 0C             INC    R4
0023 80E1           SJMP   ?WHILE13
0025         ?NXT29:
0025 22             RET    

            ; FUNCTION _SendStr (END)

C51 COMPILER V6.11.4C,  MAIN                      12/30/108  12:00:00  PAGE  3

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====

isInit . . . . . . . . . . . . . . . .  PUBLIC  DATA    BIT     0000H   1    
RecChar. . . . . . . . . . . . . . . .  PUBLIC  DATA    BASE    0000H   1    
g. . . . . . . . . . . . . . . . . . .  PUBLIC  DATA    BASE    0001H   1    
status . . . . . . . . . . . . . . . .  PUBLIC  DATA    BASE    0002H   1    
spi_rx_bytes . . . . . . . . . . . . .  PUBLIC  DATA    BASE    0003H   1    
spi_intr . . . . . . . . . . . . . . .  PUBLIC  DATA    BIT     0001H   1    
spi_rx_done. . . . . . . . . . . . . .  PUBLIC  DATA    BIT     0002H   1    
serial_data. . . . . . . . . . . . . .  PUBLIC  DATA    CHAR    0004H   1    
main . . . . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
it_SPI . . . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
KeyInt . . . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
Serial . . . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
LcdClear . . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
DelayUs. . . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
LcdInit. . . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
LcdBusy. . . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
LcdWriteCmd. . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
  var?052. . . . . . . . . . . . . . .  PARAM   DATA    BASE    0000H   1    
  var?052. . . . . . . . . . . . . . .  PARAM   DATA    BASE    0000H   1    
LcdWriteChar . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
  var?053. . . . . . . . . . . . . . .  PARAM   DATA    BASE    0000H   1    
  var?053. . . . . . . . . . . . . . .  PARAM   DATA    BASE    0000H   1    
LcdWriteStr. . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
  var?054. . . . . . . . . . . . . . .  PARAM   DATA    PTR     0000H   3    
  var?054. . . . . . . . . . . . . . .  PARAM   DATA    PTR     0000H   3    
LcdGotoXY. . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
  row?055. . . . . . . . . . . . . . .  PARAM   DATA    BASE    0000H   1    
  col?056. . . . . . . . . . . . . . .  PARAM   DATA    BASE    0001H   1    
  row?055. . . . . . . . . . . . . . .  PARAM   DATA    BASE    0000H   1    
  col?056. . . . . . . . . . . . . . .  PARAM   DATA    BASE    0001H   1    
SendChar . . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
  c?057. . . . . . . . . . . . . . . .  PARAM   DATA    BASE    0000H   1    
  c?057. . . . . . . . . . . . . . . .  PARAM   DATA    BASE    0000H   1    
SendStr. . . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
  s?058. . . . . . . . . . . . . . . .  PARAM   DATA    PTR     0000H   3    
  s?058. . . . . . . . . . . . . . . .  PARAM   DATA    PTR     0000H   3    
C51 COMPILER V6.11.4C,  MAIN                      12/30/108  12:00:00  PAGE  4



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    489    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      5    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3    ----
END OF MODULE INFORMATION.

C51 COMPILATION COMPLETE.  0 WARNING,  0 ERROR
