C51 COMPILER V6.11.4C,  MAIN                      01/08/110  15:12:48  PAGE  1

QCW(0x00002D1A)

WIN32 C51 COMPILER V6.11.4C, COMPILATION OF MODULE MAIN      
OBJECT MODULE PLACED IN f:\p\sd\usbwiz_oem\i2c2\main.obj
COMPILER INVOKED BY: C51.EXE F:\P\SD\USBWIZ_OEM\I2C2\MAIN.C OBJECT(F:\P\SD\USBWI
            -Z_OEM\I2C2\MAIN.OBJ) PIN(C:\FSI\INC) NOAM PR(F:\P\SD\USBWIZ_OEM\I2C
            -2\MAIN.LST) CD SB OE(1) SM FP(NOFLOAT) PW(80) 

stmt level    source
   1          /*				Digital Rate Meter Ranging 0.001Hz  --  1000Hz
   2          				Using PCA Interrupt Only
   3          				Handling Noise Pulse
   4          				Control Action Performed
   5                      Programmer: Sajjad Hussain S.E.
   6                      Dated: 	21-05-2009
   7          */
   8          #include "at89c51rc2.h"
   9          #include "usbwiz_oem.h"
  10          #include <intrins.h>
  11          // Main Program Starts Here
  12          void main()
  13          {
  14   1         state = 0;
  15   1      	TMOD = 0x11;
  16   1      
  17   1      	IT0 = 1;
  18   1      	EX0 = 1;
  19   1      	EA = 1;
  20   1         // Initial Screen
  21   1      	LcdInit();
  22   1      	LcdGotoXY(1,1);
  23   1      	
  24   1      	while(I2C_READY)
  25   1      		SD_Read(); 	
  26   1      	Delay5ms();
  27   1      	Putc('I');
  28   1      	
  29   1      	CCON = 0x00;
  30   1      	CMOD = 0x00;
  31   1      	CCAPM1 = 0x21;
  32   1      	EC = 1;
  33   1      	isInit = 1;
  34   1      	//Running Forever
  35   1      	while(1)
  36   1      	{
  37   2      		if(sdRead_Start)
  38   2      		{
  39   3      		 	sdRead_Start = 0;
  40   3      		 	CCAPM1 = 0x00;
  41   3      		 	while(SD_Read()!=13);
  42   3      			CCAPM1 = 0x21;
  43   3      			sdRead_End = 1;	
  44   3      			//Putc('A');
  45   3      		}
  46   2      		if(sdRead_End)
  47   2      		{
  48   3      		 	sdRead_End = 0;
  49   3      		 	switch(state)
  50   3      		 	{
  51   4      		 		case 0:
  52   4      		 			break;
  53   4      		 		case 1:
  54   4      		 		 	Putc('B');
  55   4      		 		 	state = 2;
  56   4      		 			SD_WriteCmd("FM S\r");
  57   4      		 			break;
  58   4      		 		case 2:
  59   4      		 			Putc('C');
  60   4      		 			state = 3;
  61   4      		 			SD_WriteCmd("OF 0W>TEST.TXT\r");
  62   4      		 			break;
  63   4      		 		case 3:
  64   4      		 			Putc('D');
  65   4      		 			state = 4;
  66   4      		 			//SD_WriteCmd("WF 0>9\r");
  67   4      		 			//SD_WriteCmd("WF 0>64\r");	//100
  68   4      		 			//SD_WriteCmd("WF 0>3E8\r");	//1000
  69   4      		 			//SD_WriteCmd("WF 0>2710\r");	//10000
  70   4      		 			SD_WriteCmd("WF 0>C350\r");	//50000
  71   4      		 			break;
  72   4      		 		case 4:
  73   4      		 			Putc('E');
  74   4      		 			state = 5;
  75   4      		 			//SD_WriteCmd("012345678");
  76   4      		 			for(h=0;h<50000;h++)
  77   4      		 				SD_Write('1');
  78   4      		 			break;
  79   4      		 		case 5:
  80   4      		 			Putc('F');
  81   4      		 			sdRead_Start = 1;
  82   4      		 			state = 6;
  83   4      		 			break;
  84   4      		 		case 6:
  85   4      		 			Putc('G');
  86   4      		 			state = 7;
  87   4      		 			SD_WriteCmd("CF 0\r");
  88   4      		 			break;
  89   4      		 		case 7:
  90   4      		 			break;
  91   4      		 	}//state
  92   3      		}//sdRead_End
  93   2      	}//wh
  94   1      }//main
  95          
  96          void PCATimers() interrupt 6  using 1
  97          {
  98   1      	if(isInit&&CCF1)
  99   1      	{
 100   2      		CCF1 = 0;
 101   2      		sdRead_Start = 1;
 102   2      	}
 103   1      }
 104          
 105          void KeyInterrupt() interrupt 0
 106          {
 107   1      	Key = P2&0x1F;
 108   1      	if(isInit)
 109   1      	{
 110   2      	 	switch(Key)
 111   2      	 	{
 112   3      	 	 	case 0:
 113   3      	 	 		LcdClear();
 114   3      	 	 		Putc(SD_Read());
 115   3      	 	 		Putc(SD_Read());
 116   3      	 	 		Putc(SD_Read());
 117   3      	 	 		Putc(SD_Read());
 118   3      	 	 		break;	 	 	
 119   3      	 	 	case 1:
 120   3      	 	 		state = 1;
 121   3      	 	 		SD_WriteCmd("SD\r");
 122   3      	 	 		break;
 123   3      	 	 	case 2:
 124   3      	 	 		SD_WriteCmd("FM S\r");
 125   3      	 	 		break;
 126   3      	 	 	case 3:
 127   3      	 	 		SD_WriteCmd("OF 0W>TEST.TXT\r");
 128   3      	 	 		break;
 129   3      	 	 	case 4:
 130   3      	 	 		SD_WriteCmd("WF 0>9\r");
 131   3      	 	 		break;
 132   3      	 	 	case 5:
 133   3      	 	 		//for(h=0;h<100;h++)
 134   3      	 	 		//	SD_Write(h+48);
 135   3      	 	 		SD_WriteCmd("123456789");
 136   3      	 	 		break;
 137   3      	 	 	case 6:
 138   3      	 	 		SD_WriteCmd("CF 0\r");
 139   3      	 	 		break;
 140   3      	 	 	case 8:
 141   3      	 	 		break;
 142   3      	 	 	case 9:
 143   3      	 	 		break;
 144   3      	 	 	case 12:
 145   3      	 	 		LcdClear();
 146   3      	 	 		break;
 147   3      		}		
 148   2      	}
 149   1      }
 150          
 151          
 152          
 153          
 154          
 155          
 156          
 157          
 158          
 159          
 160          
 161          
 162          
 163          
 164          
 165          
 166          
 167          
 168          
 169          
 170          
 171          
 172          
 173          
 174          
 175          
 176          
 177          
 178          
 179          
 180          
 181          
 182          
 183          
 184          
 185          
 186          
 187          
 188          
 189          
 190          
 191          
 192          
 193          
 194          
 195          
 196          
 197          
 198          
 199          
 200          
 201          
 202          
 203          
 204          
 205          
 206          
 207          
 208          
 209          
 210          
 211          
 212          
 213          
 214          
 215          
 216          
 217          
 218          
 219          
 220          
 221          
 222          
 223          
 224          
 225          
 226          
 227          
 228          
 229          
 230          
 231          
 232          
 233          
 234          
 235          
 236          
 237          
 238          
 239          
 240          
 241          
 242          
 243          
 244          
 245          
 246          
 247          
 248          
 249          
 250          
 251          
 252          
 253          
 254          
 255          
 256          
 257          
 258          
 259          
 260          
 261          
 262          
 263          
 264          
 265          
 266          
 267          
 268          
 269          
 270          
 271          
 272          
 273          
 274          
 275          
 276          
 277          
 278          
 279          
C51 COMPILER V6.11.4C,  MAIN                      01/08/110  15:12:49  PAGE  2

ASSEMBLY LISTING OF GENERATED OBJECT CODE

            ; FUNCTION _SD_WriteCmd (BEGIN)
                                           ; SOURCE LINE # 35 
0000 8B00    R      MOV    cmd,R3
0002 8A00    R      MOV    cmd+01H,R2
0004 8900    R      MOV    cmd+02H,R1
0006         ?WHILE1:
                                           ; SOURCE LINE # 32 
0006 AB00    R      MOV    R3,cmd
0008 AA00    R      MOV    R2,cmd+01H
000A A900    R      MOV    R1,cmd+02H
000C 120000  R      LCALL  IPGN1?C
000F 6011           JZ     ?NXT1
                                           ; SOURCE LINE # 34 
0011 120000  R      LCALL  IPGN1?C
0014 FF             MOV    R7,A
0015 120000  R      LCALL  _SD_Write
                                           ; SOURCE LINE # 35 
0018 0500    R      INC    cmd+02H
001A E500    R      MOV    A,cmd+02H
001C 70E8           JNZ    ?WHILE1
001E 0500    R      INC    cmd+01H
0020 80E4           SJMP   ?WHILE1
0022         ?NXT1:
0022 22             RET    

            ; FUNCTION _SD_WriteCmd (END)

            ; FUNCTION Delay5ms (BEGIN)
                                           ; SOURCE LINE # 40 
0000 758A00         MOV    TL0,#000H
0003 758CDC         MOV    TH0,#0DCH
                                           ; SOURCE LINE # 41 
0006 D28C           SETB   TR0
0008         ?WHILE3:
                                           ; SOURCE LINE # 42 
0008 308DFD         JNB    TF0,?WHILE3
                                           ; SOURCE LINE # 43 
000B C28C           CLR    TR0
                                           ; SOURCE LINE # 44 
000D C28D           CLR    TF0
000F 22             RET    

            ; FUNCTION Delay5ms (END)

            ; FUNCTION Delay30ms (BEGIN)
                                           ; SOURCE LINE # 48 
0000 758A00         MOV    TL0,#000H
0003 758C28         MOV    TH0,#028H
                                           ; SOURCE LINE # 49 
0006 D28C           SETB   TR0
0008         ?WHILE5:
                                           ; SOURCE LINE # 50 
0008 308DFD         JNB    TF0,?WHILE5
                                           ; SOURCE LINE # 51 
000B C28C           CLR    TR0
                                           ; SOURCE LINE # 52 
000D C28D           CLR    TF0
000F 22             RET    

            ; FUNCTION Delay30ms (END)

            ; FUNCTION LcdInit (BEGIN)
                                           ; SOURCE LINE # 57 
0000 7F38           MOV    R7,#038H
0002 120000  R      LCALL  _LcdWriteCmd
                                           ; SOURCE LINE # 58 
0005 7F38           MOV    R7,#038H
0007 120000  R      LCALL  _LcdWriteCmd
                                           ; SOURCE LINE # 59 
000A 7F38           MOV    R7,#038H
000C 120000  R      LCALL  _LcdWriteCmd
                                           ; SOURCE LINE # 60 
000F 7F06           MOV    R7,#006H
0011 120000  R      LCALL  _LcdWriteCmd
                                           ; SOURCE LINE # 61 
0014 7F0C           MOV    R7,#00CH
0016 120000  R      LCALL  _LcdWriteCmd
0019 22             RET    

            ; FUNCTION LcdInit (END)

            ; FUNCTION LcdBusy (BEGIN)
                                           ; SOURCE LINE # 66 
0000 D287           SETB   BS
                                           ; SOURCE LINE # 67 
0002 D293           SETB   EN
                                           ; SOURCE LINE # 68 
0004 C2B6           CLR    RS
                                           ; SOURCE LINE # 69 
0006 D292           SETB   RW
0008         ?WHILE7:
                                           ; SOURCE LINE # 70 
0008 308706         JNB    BS,?NXT7
                                           ; SOURCE LINE # 72 
000B C293           CLR    EN
                                           ; SOURCE LINE # 73 
000D D293           SETB   EN
000F 80F7           SJMP   ?WHILE7
0011         ?NXT7:
0011 22             RET    

            ; FUNCTION LcdBusy (END)

            ; FUNCTION _LcdWriteCmd (BEGIN)
              ; Register R7 is assigned to parameter var
                                           ; SOURCE LINE # 78 
0000 8F80           MOV    P0,R7
                                           ; SOURCE LINE # 79 
0002 C2B6           CLR    RS
                                           ; SOURCE LINE # 80 
0004 C292           CLR    RW
                                           ; SOURCE LINE # 81 
0006 D293           SETB   EN
                                           ; SOURCE LINE # 82 
0008 C293           CLR    EN
                                           ; SOURCE LINE # 83 
000A 120000  R      LCALL  LcdBusy
000D 22             RET    

            ; FUNCTION _LcdWriteCmd (END)

            ; FUNCTION _LcdWriteChar (BEGIN)
              ; Register R7 is assigned to parameter var
                                           ; SOURCE LINE # 87 
0000 8F80           MOV    P0,R7
                                           ; SOURCE LINE # 88 
0002 D2B6           SETB   RS
                                           ; SOURCE LINE # 89 
0004 C292           CLR    RW
                                           ; SOURCE LINE # 90 
0006 D293           SETB   EN
                                           ; SOURCE LINE # 91 
0008 C293           CLR    EN
                                           ; SOURCE LINE # 92 
000A 120000  R      LCALL  LcdBusy
000D 22             RET    

            ; FUNCTION _LcdWriteChar (END)

            ; FUNCTION _LcdWriteStr (BEGIN)
              ; Register R0R4R5 is assigned to parameter var
                                           ; SOURCE LINE # 97 
0000 EB             MOV    A,R3
0001 FD             MOV    R5,A
0002 EA             MOV    A,R2
0003 FC             MOV    R4,A
0004 E9             MOV    A,R1
0005 F8             MOV    R0,A
0006         ?WHILE9:
                                           ; SOURCE LINE # 96 
0006 ED             MOV    A,R5
0007 FB             MOV    R3,A
0008 EC             MOV    A,R4
0009 FA             MOV    R2,A
000A E8             MOV    A,R0
000B F9             MOV    R1,A
000C 120000  R      LCALL  IPGN1?C
000F 6015           JZ     ?NXT9
                                           ; SOURCE LINE # 97 
0011 ED             MOV    A,R5
0012 FB             MOV    R3,A
0013 EC             MOV    A,R4
0014 FA             MOV    R2,A
0015 E8             MOV    A,R0
0016 F9             MOV    R1,A
0017 08             INC    R0
0018 E8             MOV    A,R0
0019 7002           JNZ    ?LAB18
001B 0C             INC    R4
001C EC             MOV    A,R4
001D         ?LAB18:
001D 120000  R      LCALL  IPGN1?C
0020 FF             MOV    R7,A
0021 120000  R      LCALL  _LcdWriteChar
0024 80E0           SJMP   ?WHILE9
0026         ?NXT9:
0026 22             RET    

            ; FUNCTION _LcdWriteStr (END)

            ; FUNCTION _LcdGotoXY (BEGIN)
              ; Register R7 is assigned to parameter row
              ; Register R5 is assigned to parameter col
                                           ; SOURCE LINE # 102 
0000 EF             MOV    A,R7
0001 14             DEC    A
0002 600A           JZ     ?CASE4
0004 14             DEC    A
0005 600F           JZ     ?CASE5
0007 14             DEC    A
0008 6014           JZ     ?CASE6
000A 14             DEC    A
000B 6019           JZ     ?CASE7
000D 22             RET    
000E         ?CASE4:
                                           ; SOURCE LINE # 104 
000E ED             MOV    A,R5
000F 247F           ADD    A,#07FH
0011 FF             MOV    R7,A
0012 120000  R      LCALL  _LcdWriteCmd
0015 22             RET    
0016         ?CASE5:
                                           ; SOURCE LINE # 105 
0016 ED             MOV    A,R5
0017 24BF           ADD    A,#0BFH
0019 FF             MOV    R7,A
001A 120000  R      LCALL  _LcdWriteCmd
001D 22             RET    
001E         ?CASE6:
                                           ; SOURCE LINE # 106 
001E ED             MOV    A,R5
001F 2493           ADD    A,#093H
0021 FF             MOV    R7,A
0022 120000  R      LCALL  _LcdWriteCmd
0025 22             RET    
0026         ?CASE7:
                                           ; SOURCE LINE # 107 
0026 ED             MOV    A,R5
0027 24D3           ADD    A,#0D3H
0029 FF             MOV    R7,A
002A 120000  R      LCALL  _LcdWriteCmd
                                           ; SOURCE LINE # 108 
002D 22             RET    

            ; FUNCTION _LcdGotoXY (END)

            ; FUNCTION LcdClear (BEGIN)
                                           ; SOURCE LINE # 114 
0000 7F01           MOV    R7,#001H
0002 120000  R      LCALL  _LcdWriteCmd
                                           ; SOURCE LINE # 115 
0005 120000  R      LCALL  Delay5ms
0008 22             RET    

            ; FUNCTION LcdClear (END)

            ; FUNCTION I2C_delay (BEGIN)
              ; R3 is assigned to i
                                           ; SOURCE LINE # 121 
0000 7A01           MOV    R2,#001H
0002         ?NXT15:
0002 DAFE           DJNZ   R2,?NXT15
0004 22             RET    

            ; FUNCTION I2C_delay (END)

            ; FUNCTION I2C_clock (BEGIN)
                                           ; SOURCE LINE # 125 
0000 120000  R      LCALL  I2C_delay
                                           ; SOURCE LINE # 126 
0003 D296           SETB   I2C_SCL
                                           ; SOURCE LINE # 127 
0005 120000  R      LCALL  I2C_delay
                                           ; SOURCE LINE # 128 
0008 C296           CLR    I2C_SCL
000A 22             RET    

            ; FUNCTION I2C_clock (END)

            ; FUNCTION I2C_start (BEGIN)
                                           ; SOURCE LINE # 132 
0000 309602         JNB    I2C_SCL,?NXT17
                                           ; SOURCE LINE # 133 
0003 C296           CLR    I2C_SCL
0005         ?NXT17:
                                           ; SOURCE LINE # 134 
0005 D297           SETB   I2C_SDA
                                           ; SOURCE LINE # 135 
0007 D296           SETB   I2C_SCL
                                           ; SOURCE LINE # 136 
0009 120000  R      LCALL  I2C_delay
                                           ; SOURCE LINE # 137 
000C C297           CLR    I2C_SDA
                                           ; SOURCE LINE # 138 
000E 120000  R      LCALL  I2C_delay
                                           ; SOURCE LINE # 139 
0011 C296           CLR    I2C_SCL
0013 22             RET    

            ; FUNCTION I2C_start (END)

            ; FUNCTION I2C_stop (BEGIN)
                                           ; SOURCE LINE # 144 
0000 309602         JNB    I2C_SCL,?NXT19
                                           ; SOURCE LINE # 145 
0003 C296           CLR    I2C_SCL
0005         ?NXT19:
                                           ; SOURCE LINE # 146 
0005 C297           CLR    I2C_SDA
                                           ; SOURCE LINE # 147 
0007 120000  R      LCALL  I2C_delay
                                           ; SOURCE LINE # 148 
000A D296           SETB   I2C_SCL
                                           ; SOURCE LINE # 149 
000C 120000  R      LCALL  I2C_delay
                                           ; SOURCE LINE # 150 
000F D297           SETB   I2C_SDA
0011 22             RET    

            ; FUNCTION I2C_stop (END)

            ; FUNCTION _I2C_write (BEGIN)
                                           ; SOURCE LINE # 171 
0000 8F00    R      MOV    dat,R7
                                           ; SOURCE LINE # 157 
0002 750000  R      MOV    i,#000H
0005         ?FOR3:
                                           ; SOURCE LINE # 159 
0005 E500    R      MOV    A,dat
0007 5480           ANL    A,#080H
0009 24FF           ADD    A,#0FFH
000B 9200    R      MOV    data_bit,C
                                           ; SOURCE LINE # 160 
000D 9297           MOV    I2C_SDA,C
                                           ; SOURCE LINE # 161 
000F 120000  R      LCALL  I2C_clock
                                           ; SOURCE LINE # 162 
0012 E500    R      MOV    A,dat
0014 C3             CLR    C
0015 33             RLC    A
0016 F500    R      MOV    dat,A
                                           ; SOURCE LINE # 157 
0018 0500    R      INC    i
001A E500    R      MOV    A,i
001C B408E6         CJNE   A,#008H,?FOR3
                                           ; SOURCE LINE # 164 
001F D297           SETB   I2C_SDA
                                           ; SOURCE LINE # 165 
0021 120000  R      LCALL  I2C_delay
                                           ; SOURCE LINE # 166 
0024 D296           SETB   I2C_SCL
                                           ; SOURCE LINE # 167 
0026 120000  R      LCALL  I2C_delay
                                           ; SOURCE LINE # 168 
0029 A297           MOV    C,I2C_SDA
002B 9200    R      MOV    data_bit,C
                                           ; SOURCE LINE # 169 
002D C296           CLR    I2C_SCL
                                           ; SOURCE LINE # 170 
002F 120000  R      LCALL  I2C_delay
                                           ; SOURCE LINE # 171 
0032 22             RET    

            ; FUNCTION _I2C_write (END)

            ; FUNCTION I2C_read (BEGIN)
              ; R6 is assigned to dat
                                           ; SOURCE LINE # 178 
0000 E4             CLR    A
0001 FE             MOV    R6,A
0002 FF             MOV    R7,A
              ; R7 is assigned to i
0003         ?FOR5:
                                           ; SOURCE LINE # 181 
0003 120000  R      LCALL  I2C_delay
                                           ; SOURCE LINE # 182 
0006 D296           SETB   I2C_SCL
                                           ; SOURCE LINE # 183 
0008 120000  R      LCALL  I2C_delay
                                           ; SOURCE LINE # 184 
000B A297           MOV    C,I2C_SDA
000D 9200    R      MOV    rd_bit,C
                                           ; SOURCE LINE # 185 
000F EE             MOV    A,R6
0010 C3             CLR    C
0011 33             RLC    A
0012 FE             MOV    R6,A
                                           ; SOURCE LINE # 186 
0013 A200    R      MOV    C,rd_bit
0015 E4             CLR    A
0016 33             RLC    A
0017 2E             ADD    A,R6
0018 FE             MOV    R6,A
                                           ; SOURCE LINE # 187 
0019 C296           CLR    I2C_SCL
                                           ; SOURCE LINE # 179 
001B 0F             INC    R7
001C BF08E4         CJNE   R7,#008H,?FOR5
                                           ; SOURCE LINE # 189 
001F FF             MOV    R7,A
0020 22             RET    

            ; FUNCTION I2C_read (END)

            ; FUNCTION I2C_noack (BEGIN)
                                           ; SOURCE LINE # 193 
0000 D297           SETB   I2C_SDA
                                           ; SOURCE LINE # 194 
0002 120000  R      LCALL  I2C_delay
                                           ; SOURCE LINE # 195 
0005 120000  R      LCALL  I2C_clock
                                           ; SOURCE LINE # 196 
0008 D296           SETB   I2C_SCL
000A 22             RET    

            ; FUNCTION I2C_noack (END)

            ; FUNCTION SD_Read (BEGIN)
                                           ; SOURCE LINE # 201 
0000 120000  R      LCALL  I2C_start
                                           ; SOURCE LINE # 202 
0003 7FA5           MOV    R7,#0A5H
0005 120000  R      LCALL  _I2C_write
                                           ; SOURCE LINE # 203 
0008 120000  R      LCALL  I2C_read
000B 8F00    R      MOV    dat,R7
                                           ; SOURCE LINE # 204 
000D 120000  R      LCALL  I2C_noack
                                           ; SOURCE LINE # 205 
0010 120000  R      LCALL  I2C_stop
                                           ; SOURCE LINE # 206 
0013 AF00    R      MOV    R7,dat
0015 120000  R      LCALL  _LcdWriteChar
                                           ; SOURCE LINE # 207 
0018 22             RET    

            ; FUNCTION SD_Read (END)

            ; FUNCTION _SD_Write (BEGIN)
                                           ; SOURCE LINE # 216 
0000 8F00    R      MOV    val,R7
                                           ; SOURCE LINE # 212 
0002 120000  R      LCALL  I2C_start
                                           ; SOURCE LINE # 213 
0005 7FA4           MOV    R7,#0A4H
0007 120000  R      LCALL  _I2C_write
                                           ; SOURCE LINE # 214 
000A AF00    R      MOV    R7,val
000C 120000  R      LCALL  _I2C_write
                                           ; SOURCE LINE # 215 
000F 120000  R      LCALL  I2C_stop
0012         ?WHILE11:
                                           ; SOURCE LINE # 216 
0012 2095FD         JB     I2C_BUSY,?WHILE11
0015 22             RET    

            ; FUNCTION _SD_Write (END)

            ; FUNCTION main (BEGIN)
                                           ; SOURCE LINE # 14 
0000 E4             CLR    A
0001 F500    R      MOV    state,A
                                           ; SOURCE LINE # 15 
0003 758911         MOV    TMOD,#011H
                                           ; SOURCE LINE # 17 
0006 D288           SETB   IT0
                                           ; SOURCE LINE # 18 
0008 D2A8           SETB   EX0
                                           ; SOURCE LINE # 19 
000A D2AF           SETB   EA
                                           ; SOURCE LINE # 21 
000C 120000  R      LCALL  LcdInit
                                           ; SOURCE LINE # 22 
000F 7F01           MOV    R7,#001H
0011 7D01           MOV    R5,#001H
0013 120000  R      LCALL  _LcdGotoXY
0016         ?WHILE15:
                                           ; SOURCE LINE # 24 
0016 309405         JNB    I2C_READY,?NXT38
                                           ; SOURCE LINE # 25 
0019 120000  R      LCALL  SD_Read
001C 80F8           SJMP   ?WHILE15
001E         ?NXT38:
                                           ; SOURCE LINE # 26 
001E 120000  R      LCALL  Delay5ms
                                           ; SOURCE LINE # 27 
0021 7F49           MOV    R7,#049H
0023 120000  R      LCALL  _LcdWriteChar
                                           ; SOURCE LINE # 29 
0026 75D800         MOV    CCON,#000H
                                           ; SOURCE LINE # 30 
0029 75D900         MOV    CMOD,#000H
                                           ; SOURCE LINE # 31 
002C 75DB21         MOV    CCAPM1,#021H
                                           ; SOURCE LINE # 32 
002F D2AE           SETB   EC
                                           ; SOURCE LINE # 33 
0031 D200    R      SETB   isInit
0033         ?WHILE16:
                                           ; SOURCE LINE # 37 
0033 300010  R      JNB    sdRead_Start,?NXT40
                                           ; SOURCE LINE # 39 
0036 C200    R      CLR    sdRead_Start
                                           ; SOURCE LINE # 40 
0038 75DB00         MOV    CCAPM1,#000H
003B         ?WHILE17:
                                           ; SOURCE LINE # 41 
003B 120000  R      LCALL  SD_Read
003E BF0DFA         CJNE   R7,#00DH,?WHILE17
                                           ; SOURCE LINE # 42 
0041 75DB21         MOV    CCAPM1,#021H
                                           ; SOURCE LINE # 43 
0044 D200    R      SETB   sdRead_End
0046         ?NXT40:
                                           ; SOURCE LINE # 46 
0046 3000EA  R      JNB    sdRead_End,?WHILE16
                                           ; SOURCE LINE # 48 
0049 C200    R      CLR    sdRead_End
                                           ; SOURCE LINE # 49 
004B E500    R      MOV    A,state
004D 2400           ADD    A,#000H
004F B40800         CJNE   A,#008H,?LAB54
0052         ?LAB54:
0052 4003           JC     $ + 5
0054 020000  R      LJMP   ?NXT43
0057 FA             MOV    R2,A
0058 23             RL     A
0059 2A             ADD    A,R2
005A 900000  R      MOV    DPTR,#?LAB55
005D 73             JMP    @A+DPTR
005E         ?LAB55:
005E 020000  R      LJMP   ?NXT43
0061 020000  R      LJMP   ?CASE17
0064 020000  R      LJMP   ?CASE18
0067 020000  R      LJMP   ?CASE19
006A 020000  R      LJMP   ?CASE20
006D 020000  R      LJMP   ?CASE21
0070 020000  R      LJMP   ?CASE22
0073 020000  R      LJMP   ?NXT43
0076 80BB           SJMP   ?WHILE16
0078         ?CASE17:
                                           ; SOURCE LINE # 54 
0078 7F42           MOV    R7,#042H
007A 120000  R      LCALL  _LcdWriteChar
                                           ; SOURCE LINE # 55 
007D 750002  R      MOV    state,#002H
                                           ; SOURCE LINE # 56 
0080 7B05           MOV    R3,#005H
0082 7A00    R      MOV    R2,#000H
0084 7900    R      MOV    R1,#000H
0086 120000  R      LCALL  _SD_WriteCmd
                                           ; SOURCE LINE # 57 
0089 80A8           SJMP   ?WHILE16
008B         ?CASE18:
                                           ; SOURCE LINE # 59 
008B 7F43           MOV    R7,#043H
008D 120000  R      LCALL  _LcdWriteChar
                                           ; SOURCE LINE # 60 
0090 750003  R      MOV    state,#003H
                                           ; SOURCE LINE # 61 
0093 7B05           MOV    R3,#005H
0095 7A00    R      MOV    R2,#000H
0097 7900    R      MOV    R1,#000H
0099 120000  R      LCALL  _SD_WriteCmd
                                           ; SOURCE LINE # 62 
009C 8095           SJMP   ?WHILE16
009E         ?CASE19:
                                           ; SOURCE LINE # 64 
009E 7F44           MOV    R7,#044H
00A0 120000  R      LCALL  _LcdWriteChar
                                           ; SOURCE LINE # 65 
00A3 750004  R      MOV    state,#004H
                                           ; SOURCE LINE # 70 
00A6 7B05           MOV    R3,#005H
00A8 7A00    R      MOV    R2,#000H
00AA 7900    R      MOV    R1,#000H
00AC 120000  R      LCALL  _SD_WriteCmd
                                           ; SOURCE LINE # 71 
00AF 8082           SJMP   ?WHILE16
00B1         ?CASE20:
                                           ; SOURCE LINE # 73 
00B1 7F45           MOV    R7,#045H
00B3 120000  R      LCALL  _LcdWriteChar
                                           ; SOURCE LINE # 74 
00B6 750005  R      MOV    state,#005H
                                           ; SOURCE LINE # 76 
00B9 E4             CLR    A
00BA F500    R      MOV    h,A
00BC F500    R      MOV    h+01H,A
00BE         ?FOR7:
00BE E4             CLR    A
00BF FD             MOV    R5,A
00C0 FC             MOV    R4,A
00C1 C0E0           PUSH   ACC
00C3 C0E0           PUSH   ACC
00C5 C000    R      PUSH   h
00C7 C000    R      PUSH   h+01H
00C9 74C3           MOV    A,#0C3H
00CB FE             MOV    R6,A
00CC 7450           MOV    A,#050H
00CE FF             MOV    R7,A
00CF 120000  R      LCALL  ?C_CMPLS
00D2 BFFF2D         CJNE   R7,#0FFH,?NXT43
                                           ; SOURCE LINE # 77 
00D5 7F31           MOV    R7,#031H
00D7 120000  R      LCALL  _SD_Write
                                           ; SOURCE LINE # 76 
00DA 0500    R      INC    h+01H
00DC E500    R      MOV    A,h+01H
00DE 70DE           JNZ    ?FOR7
00E0 0500    R      INC    h
00E2 80DA           SJMP   ?FOR7
00E4         ?CASE21:
                                           ; SOURCE LINE # 80 
00E4 7F46           MOV    R7,#046H
00E6 120000  R      LCALL  _LcdWriteChar
                                           ; SOURCE LINE # 81 
00E9 D200    R      SETB   sdRead_Start
                                           ; SOURCE LINE # 82 
00EB 750006  R      MOV    state,#006H
                                           ; SOURCE LINE # 83 
00EE 020000  R      LJMP   ?WHILE16
00F1         ?CASE22:
                                           ; SOURCE LINE # 85 
00F1 7F47           MOV    R7,#047H
00F3 120000  R      LCALL  _LcdWriteChar
                                           ; SOURCE LINE # 86 
00F6 750007  R      MOV    state,#007H
                                           ; SOURCE LINE # 87 
00F9 7B05           MOV    R3,#005H
00FB 7A00    R      MOV    R2,#000H
00FD 7900    R      MOV    R1,#000H
00FF 120000  R      LCALL  _SD_WriteCmd
0102         ?NXT43:
                                           ; SOURCE LINE # 90 
0102 020000  R      LJMP   ?WHILE16

            ; FUNCTION main (END)

            ; FUNCTION PCATimers (BEGIN)
                                           ; SOURCE LINE # 101 
0000 C0D0           PUSH   PSW
0002 75D008         MOV    PSW,#008H
                                           ; SOURCE LINE # 98 
0005 300007  R      JNB    isInit,?NXT49
0008 30D904         JNB    CCF1,?NXT49
                                           ; SOURCE LINE # 100 
000B C2D9           CLR    CCF1
                                           ; SOURCE LINE # 101 
000D D200    R      SETB   sdRead_Start
000F         ?NXT49:
000F D0D0           POP    PSW
0011 32             RETI   

            ; FUNCTION PCATimers (END)

            ; FUNCTION KeyInterrupt (BEGIN)
                                           ; SOURCE LINE # 146 
0000 C0E0           PUSH   ACC
0002 C0F0           PUSH   B
0004 C083           PUSH   DPH
0006 C082           PUSH   DPL
0008 C0D0           PUSH   PSW
000A C000           PUSH   AR0
000C C001           PUSH   AR1
000E C002           PUSH   AR2
0010 C003           PUSH   AR3
0012 C004           PUSH   AR4
0014 C005           PUSH   AR5
0016 C006           PUSH   AR6
0018 C007           PUSH   AR7
                                           ; SOURCE LINE # 107 
001A E5A0           MOV    A,P2
001C 541F           ANL    A,#01FH
001E F500    R      MOV    Key,A
                                           ; SOURCE LINE # 108 
0020 200003  R      JB     isInit,$ + 6
0023 020000  R      LJMP   ?NXT55
                                           ; SOURCE LINE # 110 
0026 E500    R      MOV    A,Key
0028 B40502         CJNE   A,#005H,?LAB68
002B 8073           SJMP   ?CASE39
002D         ?LAB68:
002D 5012           JNC    ?LAB67
002F E500    R      MOV    A,Key
0031 6021           JZ     ?CASE34
0033 14             DEC    A
0034 603B           JZ     ?CASE35
0036 14             DEC    A
0037 6046           JZ     ?CASE36
0039 14             DEC    A
003A 604E           JZ     ?CASE37
003C 14             DEC    A
003D 6056           JZ     ?CASE38
003F 8078           SJMP   ?NXT54
0041         ?LAB67:
0041 E500    R      MOV    A,Key
0043 24FA           ADD    A,#0FAH
0045 6064           JZ     ?CASE40
0047 24FE           ADD    A,#0FEH
0049 606E           JZ     ?NXT54
004B 14             DEC    A
004C 606B           JZ     ?NXT54
004E 24FD           ADD    A,#0FDH
0050 6064           JZ     ?CASE43
0052 8065           SJMP   ?NXT55
0054         ?CASE34:
                                           ; SOURCE LINE # 113 
0054 120000  R      LCALL  LcdClear
                                           ; SOURCE LINE # 114 
0057 120000  R      LCALL  SD_Read
005A 120000  R      LCALL  _LcdWriteChar
                                           ; SOURCE LINE # 115 
005D 120000  R      LCALL  SD_Read
0060 120000  R      LCALL  _LcdWriteChar
                                           ; SOURCE LINE # 116 
0063 120000  R      LCALL  SD_Read
0066 120000  R      LCALL  _LcdWriteChar
                                           ; SOURCE LINE # 117 
0069 120000  R      LCALL  SD_Read
006C 120000  R      LCALL  _LcdWriteChar
                                           ; SOURCE LINE # 118 
006F 8048           SJMP   ?NXT55
0071         ?CASE35:
                                           ; SOURCE LINE # 120 
0071 750001  R      MOV    state,#001H
                                           ; SOURCE LINE # 121 
0074 7B05           MOV    R3,#005H
0076 7A00    R      MOV    R2,#000H
0078 7900    R      MOV    R1,#000H
007A 120000  R      LCALL  _SD_WriteCmd
                                           ; SOURCE LINE # 122 
007D 803A           SJMP   ?NXT55
007F         ?CASE36:
                                           ; SOURCE LINE # 124 
007F 7B05           MOV    R3,#005H
0081 7A00    R      MOV    R2,#000H
0083 7900    R      MOV    R1,#000H
0085 120000  R      LCALL  _SD_WriteCmd
                                           ; SOURCE LINE # 125 
0088 802F           SJMP   ?NXT55
008A         ?CASE37:
                                           ; SOURCE LINE # 127 
008A 7B05           MOV    R3,#005H
008C 7A00    R      MOV    R2,#000H
008E 7900    R      MOV    R1,#000H
0090 120000  R      LCALL  _SD_WriteCmd
                                           ; SOURCE LINE # 128 
0093 8024           SJMP   ?NXT55
0095         ?CASE38:
                                           ; SOURCE LINE # 130 
0095 7B05           MOV    R3,#005H
0097 7A00    R      MOV    R2,#000H
0099 7900    R      MOV    R1,#000H
009B 120000  R      LCALL  _SD_WriteCmd
                                           ; SOURCE LINE # 131 
009E 8019           SJMP   ?NXT55
00A0         ?CASE39:
                                           ; SOURCE LINE # 135 
00A0 7B05           MOV    R3,#005H
00A2 7A00    R      MOV    R2,#000H
00A4 7900    R      MOV    R1,#000H
00A6 120000  R      LCALL  _SD_WriteCmd
                                           ; SOURCE LINE # 136 
00A9 800E           SJMP   ?NXT55
00AB         ?CASE40:
                                           ; SOURCE LINE # 138 
00AB 7B05           MOV    R3,#005H
00AD 7A00    R      MOV    R2,#000H
00AF 7900    R      MOV    R1,#000H
00B1 120000  R      LCALL  _SD_WriteCmd
                                           ; SOURCE LINE # 139 
00B4 8003           SJMP   ?NXT55
00B6         ?CASE43:
                                           ; SOURCE LINE # 145 
00B6 120000  R      LCALL  LcdClear
00B9         ?NXT54:

00B9         ?NXT55:
                                           ; SOURCE LINE # 146 
00B9 D007           POP    AR7
00BB D006           POP    AR6
00BD D005           POP    AR5
00BF D004           POP    AR4
00C1 D003           POP    AR3
00C3 D002           POP    AR2
00C5 D001           POP    AR1
00C7 D000           POP    AR0
00C9 D0D0           POP    PSW
00CB D082           POP    DPL
00CD D083           POP    DPH
00CF D0F0           POP    B
00D1 D0E0           POP    ACC
00D3 32             RETI   

            ; FUNCTION KeyInterrupt (END)

C51 COMPILER V6.11.4C,  MAIN                      01/08/110  15:12:49  PAGE  3

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====

Key. . . . . . . . . . . . . . . . . .  PUBLIC  DATA    BASE    0000H   1    
state. . . . . . . . . . . . . . . . .  PUBLIC  DATA    BASE    0001H   1    
h. . . . . . . . . . . . . . . . . . .  PUBLIC  DATA    U_INT  0002H   2    
isInit . . . . . . . . . . . . . . . .  PUBLIC  DATA    BIT     0000H   1    
sdRead_Start . . . . . . . . . . . . .  PUBLIC  DATA    BIT     0001H   1    
sdRead_End . . . . . . . . . . . . . .  PUBLIC  DATA    BIT     0002H   1    
SD_WriteCmd. . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
  cmd?051. . . . . . . . . . . . . . .  PARAM   DATA    PTR     0000H   3    
  cmd?051. . . . . . . . . . . . . . .  PARAM   DATA    PTR     0000H   3    
Delay5ms . . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
Delay30ms. . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
LcdInit. . . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
LcdBusy. . . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
LcdWriteCmd. . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
  var?054. . . . . . . . . . . . . . .  PARAM   DATA    BASE    0000H   1    
  var?054. . . . . . . . . . . . . . .  PARAM   DATA    BASE    0000H   1    
LcdWriteChar . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
  var?055. . . . . . . . . . . . . . .  PARAM   DATA    BASE    0000H   1    
  var?055. . . . . . . . . . . . . . .  PARAM   DATA    BASE    0000H   1    
LcdWriteStr. . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
  var?056. . . . . . . . . . . . . . .  PARAM   DATA    PTR     0000H   3    
  var?056. . . . . . . . . . . . . . .  PARAM   DATA    PTR     0000H   3    
LcdGotoXY. . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
  row?057. . . . . . . . . . . . . . .  PARAM   DATA    BASE    0000H   1    
  col?058. . . . . . . . . . . . . . .  PARAM   DATA    BASE    0001H   1    
  row?057. . . . . . . . . . . . . . .  PARAM   DATA    BASE    0000H   1    
  col?058. . . . . . . . . . . . . . .  PARAM   DATA    BASE    0001H   1    
LcdClear . . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
I2C_delay. . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
i?061. . . . . . . . . . . . . . . . .  PUBLIC  DATA    BASE    0000H   1    
I2C_clock. . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
I2C_start. . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
I2C_stop . . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
I2C_write. . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
  dat?065. . . . . . . . . . . . . . .  PARAM   DATA    BASE    0000H   1    
  dat?065. . . . . . . . . . . . . . .  PARAM   DATA    BASE    0000H   1    
data_bit?066 . . . . . . . . . . . . .  PUBLIC  DATA    BIT     0000H   1    
i?067. . . . . . . . . . . . . . . . .  PUBLIC  DATA    BASE    0001H   1    
I2C_read . . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
rd_bit?069 . . . . . . . . . . . . . .  PUBLIC  DATA    BIT     0000H   1    
i?070. . . . . . . . . . . . . . . . .  PUBLIC  DATA    BASE    0000H   1    
dat?071. . . . . . . . . . . . . . . .  PUBLIC  DATA    BASE    0000H   1    
I2C_noack. . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
SD_Read. . . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
dat?073. . . . . . . . . . . . . . . .  PUBLIC  DATA    BASE    0000H   1    
SD_Write . . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
  val?074. . . . . . . . . . . . . . .  PARAM   DATA    BASE    0000H   1    
  val?074. . . . . . . . . . . . . . .  PARAM   DATA    BASE    0000H   1    
main . . . . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
PCATimers. . . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
KeyInterrupt . . . . . . . . . . . . .  PUBLIC  CODE    PROC    -----   -----
C51 COMPILER V6.11.4C,  MAIN                      01/08/110  15:12:49  PAGE  4



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    920    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      4       5
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3       2
END OF MODULE INFORMATION.

C51 COMPILATION COMPLETE.  0 WARNING,  0 ERROR
